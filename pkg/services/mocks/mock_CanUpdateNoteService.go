// Code generated by mockery v2.43.2. DO NOT EDIT.

package servicesmocks

import (
	context "context"

	config "github.com/in-rich/uservice-subscription/config"

	mock "github.com/stretchr/testify/mock"

	models "github.com/in-rich/uservice-subscription/pkg/models"

	time "time"
)

// MockCanUpdateNoteService is an autogenerated mock type for the CanUpdateNoteService type
type MockCanUpdateNoteService struct {
	mock.Mock
}

type MockCanUpdateNoteService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCanUpdateNoteService) EXPECT() *MockCanUpdateNoteService_Expecter {
	return &MockCanUpdateNoteService_Expecter{mock: &_m.Mock}
}

// Exec provides a mock function with given fields: ctx, canUpdateRequest, tier, now
func (_m *MockCanUpdateNoteService) Exec(ctx context.Context, canUpdateRequest *models.CanUpdateNoteRequest, tier config.TierInformation, now time.Time) (int, error) {
	ret := _m.Called(ctx, canUpdateRequest, tier, now)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.CanUpdateNoteRequest, config.TierInformation, time.Time) (int, error)); ok {
		return rf(ctx, canUpdateRequest, tier, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.CanUpdateNoteRequest, config.TierInformation, time.Time) int); ok {
		r0 = rf(ctx, canUpdateRequest, tier, now)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.CanUpdateNoteRequest, config.TierInformation, time.Time) error); ok {
		r1 = rf(ctx, canUpdateRequest, tier, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCanUpdateNoteService_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockCanUpdateNoteService_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - ctx context.Context
//   - canUpdateRequest *models.CanUpdateNoteRequest
//   - tier config.TierInformation
//   - now time.Time
func (_e *MockCanUpdateNoteService_Expecter) Exec(ctx interface{}, canUpdateRequest interface{}, tier interface{}, now interface{}) *MockCanUpdateNoteService_Exec_Call {
	return &MockCanUpdateNoteService_Exec_Call{Call: _e.mock.On("Exec", ctx, canUpdateRequest, tier, now)}
}

func (_c *MockCanUpdateNoteService_Exec_Call) Run(run func(ctx context.Context, canUpdateRequest *models.CanUpdateNoteRequest, tier config.TierInformation, now time.Time)) *MockCanUpdateNoteService_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.CanUpdateNoteRequest), args[2].(config.TierInformation), args[3].(time.Time))
	})
	return _c
}

func (_c *MockCanUpdateNoteService_Exec_Call) Return(_a0 int, _a1 error) *MockCanUpdateNoteService_Exec_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCanUpdateNoteService_Exec_Call) RunAndReturn(run func(context.Context, *models.CanUpdateNoteRequest, config.TierInformation, time.Time) (int, error)) *MockCanUpdateNoteService_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCanUpdateNoteService creates a new instance of MockCanUpdateNoteService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCanUpdateNoteService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCanUpdateNoteService {
	mock := &MockCanUpdateNoteService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
