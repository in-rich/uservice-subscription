// Code generated by mockery v2.43.2. DO NOT EDIT.

package daomocks

import (
	context "context"

	dao "github.com/in-rich/uservice-subscription/pkg/dao"
	entities "github.com/in-rich/uservice-subscription/pkg/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockCreateNoteEditRepository is an autogenerated mock type for the CreateNoteEditRepository type
type MockCreateNoteEditRepository struct {
	mock.Mock
}

type MockCreateNoteEditRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCreateNoteEditRepository) EXPECT() *MockCreateNoteEditRepository_Expecter {
	return &MockCreateNoteEditRepository_Expecter{mock: &_m.Mock}
}

// CreateNoteEdit provides a mock function with given fields: ctx, author, data
func (_m *MockCreateNoteEditRepository) CreateNoteEdit(ctx context.Context, author string, data *dao.CreateNoteEditData) (*entities.NoteEdit, error) {
	ret := _m.Called(ctx, author, data)

	if len(ret) == 0 {
		panic("no return value specified for CreateNoteEdit")
	}

	var r0 *entities.NoteEdit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *dao.CreateNoteEditData) (*entities.NoteEdit, error)); ok {
		return rf(ctx, author, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *dao.CreateNoteEditData) *entities.NoteEdit); ok {
		r0 = rf(ctx, author, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.NoteEdit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *dao.CreateNoteEditData) error); ok {
		r1 = rf(ctx, author, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCreateNoteEditRepository_CreateNoteEdit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNoteEdit'
type MockCreateNoteEditRepository_CreateNoteEdit_Call struct {
	*mock.Call
}

// CreateNoteEdit is a helper method to define mock.On call
//   - ctx context.Context
//   - author string
//   - data *dao.CreateNoteEditData
func (_e *MockCreateNoteEditRepository_Expecter) CreateNoteEdit(ctx interface{}, author interface{}, data interface{}) *MockCreateNoteEditRepository_CreateNoteEdit_Call {
	return &MockCreateNoteEditRepository_CreateNoteEdit_Call{Call: _e.mock.On("CreateNoteEdit", ctx, author, data)}
}

func (_c *MockCreateNoteEditRepository_CreateNoteEdit_Call) Run(run func(ctx context.Context, author string, data *dao.CreateNoteEditData)) *MockCreateNoteEditRepository_CreateNoteEdit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*dao.CreateNoteEditData))
	})
	return _c
}

func (_c *MockCreateNoteEditRepository_CreateNoteEdit_Call) Return(_a0 *entities.NoteEdit, _a1 error) *MockCreateNoteEditRepository_CreateNoteEdit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCreateNoteEditRepository_CreateNoteEdit_Call) RunAndReturn(run func(context.Context, string, *dao.CreateNoteEditData) (*entities.NoteEdit, error)) *MockCreateNoteEditRepository_CreateNoteEdit_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCreateNoteEditRepository creates a new instance of MockCreateNoteEditRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCreateNoteEditRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCreateNoteEditRepository {
	mock := &MockCreateNoteEditRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
