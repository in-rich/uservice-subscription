// Code generated by mockery v2.43.2. DO NOT EDIT.

package daomocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockCountNoteEditsByAuthorRepository is an autogenerated mock type for the CountNoteEditsByAuthorRepository type
type MockCountNoteEditsByAuthorRepository struct {
	mock.Mock
}

type MockCountNoteEditsByAuthorRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCountNoteEditsByAuthorRepository) EXPECT() *MockCountNoteEditsByAuthorRepository_Expecter {
	return &MockCountNoteEditsByAuthorRepository_Expecter{mock: &_m.Mock}
}

// CountNoteEditsByAuthor provides a mock function with given fields: ctx, author, since
func (_m *MockCountNoteEditsByAuthorRepository) CountNoteEditsByAuthor(ctx context.Context, author string, since *time.Time) (int, error) {
	ret := _m.Called(ctx, author, since)

	if len(ret) == 0 {
		panic("no return value specified for CountNoteEditsByAuthor")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *time.Time) (int, error)); ok {
		return rf(ctx, author, since)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *time.Time) int); ok {
		r0 = rf(ctx, author, since)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *time.Time) error); ok {
		r1 = rf(ctx, author, since)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCountNoteEditsByAuthorRepository_CountNoteEditsByAuthor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountNoteEditsByAuthor'
type MockCountNoteEditsByAuthorRepository_CountNoteEditsByAuthor_Call struct {
	*mock.Call
}

// CountNoteEditsByAuthor is a helper method to define mock.On call
//   - ctx context.Context
//   - author string
//   - since *time.Time
func (_e *MockCountNoteEditsByAuthorRepository_Expecter) CountNoteEditsByAuthor(ctx interface{}, author interface{}, since interface{}) *MockCountNoteEditsByAuthorRepository_CountNoteEditsByAuthor_Call {
	return &MockCountNoteEditsByAuthorRepository_CountNoteEditsByAuthor_Call{Call: _e.mock.On("CountNoteEditsByAuthor", ctx, author, since)}
}

func (_c *MockCountNoteEditsByAuthorRepository_CountNoteEditsByAuthor_Call) Run(run func(ctx context.Context, author string, since *time.Time)) *MockCountNoteEditsByAuthorRepository_CountNoteEditsByAuthor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*time.Time))
	})
	return _c
}

func (_c *MockCountNoteEditsByAuthorRepository_CountNoteEditsByAuthor_Call) Return(_a0 int, _a1 error) *MockCountNoteEditsByAuthorRepository_CountNoteEditsByAuthor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCountNoteEditsByAuthorRepository_CountNoteEditsByAuthor_Call) RunAndReturn(run func(context.Context, string, *time.Time) (int, error)) *MockCountNoteEditsByAuthorRepository_CountNoteEditsByAuthor_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCountNoteEditsByAuthorRepository creates a new instance of MockCountNoteEditsByAuthorRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCountNoteEditsByAuthorRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCountNoteEditsByAuthorRepository {
	mock := &MockCountNoteEditsByAuthorRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
