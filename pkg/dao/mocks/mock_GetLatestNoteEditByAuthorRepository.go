// Code generated by mockery v2.43.2. DO NOT EDIT.

package daomocks

import (
	context "context"

	entities "github.com/in-rich/uservice-subscription/pkg/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockGetLatestNoteEditByAuthorRepository is an autogenerated mock type for the GetLatestNoteEditByAuthorRepository type
type MockGetLatestNoteEditByAuthorRepository struct {
	mock.Mock
}

type MockGetLatestNoteEditByAuthorRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGetLatestNoteEditByAuthorRepository) EXPECT() *MockGetLatestNoteEditByAuthorRepository_Expecter {
	return &MockGetLatestNoteEditByAuthorRepository_Expecter{mock: &_m.Mock}
}

// GetLatestNoteEditByAuthor provides a mock function with given fields: ctx, author, target, publicIdentifier
func (_m *MockGetLatestNoteEditByAuthorRepository) GetLatestNoteEditByAuthor(ctx context.Context, author string, target entities.Target, publicIdentifier string) (*entities.NoteEdit, error) {
	ret := _m.Called(ctx, author, target, publicIdentifier)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestNoteEditByAuthor")
	}

	var r0 *entities.NoteEdit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entities.Target, string) (*entities.NoteEdit, error)); ok {
		return rf(ctx, author, target, publicIdentifier)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, entities.Target, string) *entities.NoteEdit); ok {
		r0 = rf(ctx, author, target, publicIdentifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.NoteEdit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, entities.Target, string) error); ok {
		r1 = rf(ctx, author, target, publicIdentifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGetLatestNoteEditByAuthorRepository_GetLatestNoteEditByAuthor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestNoteEditByAuthor'
type MockGetLatestNoteEditByAuthorRepository_GetLatestNoteEditByAuthor_Call struct {
	*mock.Call
}

// GetLatestNoteEditByAuthor is a helper method to define mock.On call
//   - ctx context.Context
//   - author string
//   - target entities.Target
//   - publicIdentifier string
func (_e *MockGetLatestNoteEditByAuthorRepository_Expecter) GetLatestNoteEditByAuthor(ctx interface{}, author interface{}, target interface{}, publicIdentifier interface{}) *MockGetLatestNoteEditByAuthorRepository_GetLatestNoteEditByAuthor_Call {
	return &MockGetLatestNoteEditByAuthorRepository_GetLatestNoteEditByAuthor_Call{Call: _e.mock.On("GetLatestNoteEditByAuthor", ctx, author, target, publicIdentifier)}
}

func (_c *MockGetLatestNoteEditByAuthorRepository_GetLatestNoteEditByAuthor_Call) Run(run func(ctx context.Context, author string, target entities.Target, publicIdentifier string)) *MockGetLatestNoteEditByAuthorRepository_GetLatestNoteEditByAuthor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(entities.Target), args[3].(string))
	})
	return _c
}

func (_c *MockGetLatestNoteEditByAuthorRepository_GetLatestNoteEditByAuthor_Call) Return(_a0 *entities.NoteEdit, _a1 error) *MockGetLatestNoteEditByAuthorRepository_GetLatestNoteEditByAuthor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGetLatestNoteEditByAuthorRepository_GetLatestNoteEditByAuthor_Call) RunAndReturn(run func(context.Context, string, entities.Target, string) (*entities.NoteEdit, error)) *MockGetLatestNoteEditByAuthorRepository_GetLatestNoteEditByAuthor_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGetLatestNoteEditByAuthorRepository creates a new instance of MockGetLatestNoteEditByAuthorRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGetLatestNoteEditByAuthorRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGetLatestNoteEditByAuthorRepository {
	mock := &MockGetLatestNoteEditByAuthorRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
